@model Myte.Models.Registro

@{
    ViewData["Title"] = "Registro de Horas";
}
@if (TempData["message"] != null)
{
    <script src="/lib/jquery/dist/jquery.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>
    <script type="text/javascript">
        toastr.success('@TempData["message"]');
    </script>
}

<style>
    .background-image {
        position: absolute;
        top: 0;
        left: 0;
        z-index: -1;
        width: 100%;
        height: 100%;
        object-fit: cover;
        opacity: 0.7;
    }

    .text-center-btn {
        display: flex;
        justify-content: center;
        margin-top: 10px;
    }
</style>

<img src="~/IMG/IMG3.png" class="background-image" alt="Background Image">

<div class="container mt-2">
    <div class="row justify-content-center">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-header bg-white text-black">
                    <h2 class="card-title text-center mb-0">REGISTRO DE HORAS</h2>
                </div>
                <hr />
                <div class="row justify-content-center">
                    <div class="col-md-8">
                        <form asp-action="Create">
                            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                            <div class="form-group text-center">
                                <label asp-for="FuncionarioId" class="control-label"><strong>ID Funcionário:</strong></label><br />
                                <select asp-for="FuncionarioId" class="form-control" asp-items="ViewBag.FuncionarioId"></select><br />
                            </div>
                            <div class="form-group text-center">
                                <label asp-for="DataRegistro" class="control-label"><strong>Data Registro:</strong></label><br />
                                <input asp-for="DataRegistro" class="form-control" id="startDate" />
                                <span asp-validation-for="DataRegistro" class="text-danger"></span><br />
                            </div>
                            <div class="form-group text-center">
                                <label asp-for="DataRegistro" class="control-label"><strong>Data Final:</strong></label><br />
                                <input type="date" class="form-control" id="endDate" />
                                <span asp-validation-for="DataRegistro" class="text-danger"></span><br />
                            </div>
                            <div class="form-group row text-center">
                                <div class="col-sm-12">
                                    <button type="button" class="btn btn-dark" onclick="generateTable()">Gerar Tabela</button>
                                </div>
                            </div>
                            <div class="form-group text-center">
                                <button type="submit" class="btn btn-primary">Registrar</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="container mt-5">
    <button class="btn btn-success mb-3" onclick="submitData()">Enviar Dados</button>
    <table class="table table-bordered" id="workHoursTable">
        <thead>
            <tr>
                <th>WBS</th>
                <!-- Date headers will be inserted here dynamically -->

            </tr>
        </thead>
        <tbody>
            <!-- Rows with task select and input fields for hours will be inserted here dynamically -->
        </tbody>
        <tfoot>
            <tr>
                <td>Total Hours</td>
                <!-- Total hours will be inserted here dynamically -->
            </tr>
        </tfoot>
    </table>
</div>

<div class="container mt-5">
    <h3>Submitted Data:</h3>
    <table class="table table-bordered" id="submittedDataTable">
        <thead>
            <tr>
                <th>
                    WBS
                    <select class="form-control" id="filterWBS" onchange="filterData()">
                        <option value="">All</option>
                        @foreach (var wbs in ViewBag.WBSList)
                        {
                            <option value="@wbs.Value">@wbs.Text</option>
                        }
                    </select>
                </th>
                <th>
                    Date
                    <input type="date" class="form-control" id="filterDate" onchange="filterData()">
                </th>
                <th>
                    Hours
                    <input type="number" class="form-control" id="filterHours" min="0" max="24" onchange="filterData()">
                </th>
            </tr>
        </thead>
        <tbody id="submittedDataBody">
            <!-- Submitted data will be inserted here dynamically -->
        </tbody>
    </table>
</div>

@section Scripts {
    <script>
        const submittedDataArray = [];
        let wbsOptions = '';

        function loadWBSOptions(callback) {
            $.ajax({
                type: 'GET',
                url: '@Url.Action("GetWBSOptions", "Registroes")',
                success: function (data) {
                    wbsOptions = '<option value="">None</option>';
                    data.forEach(wbs => {
                        wbsOptions += `<option value="${wbs.wbsId}">${wbs.codigo}</option>`;
                    });
                    if (callback) callback();
                },
                error: function (error) {
                    console.error('Erro ao carregar opções de WBS', error);
                }
            });
        }


        function generateTable() {
            // Limpar conteúdo anterior da tabela
            $('#workHoursTable thead tr').empty();
            $('#workHoursTable tbody').empty();
            $('#workHoursTable tfoot tr').empty();

            // Adicionar cabeçalho WBS
            $('#workHoursTable thead tr').append('<th>WBS</th>');

            // Obter datas de início e fim
            const startDate = new Date($('#startDate').val());
            const endDate = new Date($('#endDate').val());

            // Gerar cabeçalhos de datas
            const dates = [];
            let currentDate = startDate;
            while (currentDate <= endDate) {
                dates.push(new Date(currentDate));
                currentDate.setDate(currentDate.getDate() + 1);
            }

            dates.forEach(date => {
                const dateStr = date.toISOString().split('T')[0];
                $('#workHoursTable thead tr').append(`<th>${dateStr}</th>`);
                $('#workHoursTable tfoot tr').append(`<td class="total-hours" id="total-${dateStr}">0</td>`);
            });

            // Gerar linhas
            for (let i = 0; i < 5; i++) { // Gerar 5 linhas como exemplo
                let row = `<tr><td><select class="form-control task-select">${wbsOptions}</select></td>`;
                dates.forEach(date => {
                    const day = date.getDay();
                    const isWeekend = (day === 5 || day === 6);
                    const inputField = `<td><input type="number" class="form-control hours-input${isWeekend ? ' disabled-input' : ''}"
                            ${isWeekend ? 'disabled' : ''}
                            min="0" max="24"
                            data-date="${date.toISOString().split('T')[0]}"
                            onchange="updateTotals('${date.toISOString().split('T')[0]}')">
                    </td>`;
                    row += inputField;
                });
                row += '</tr>';
                $('#workHoursTable tbody').append(row);
            }
        }

        function submitData() {
            const funcionarioId = $('#FuncionarioId').val();
            const tableData = [];
            const dates = [];
            $('#workHoursTable thead th').each(function (index) {
                if (index > 0) dates.push($(this).text());
            });

            $('#workHoursTable tbody tr').each(function () {
                const row = $(this);
                const wbs = row.find('select').val();
                if (wbs === undefined || wbs === "") {
                    console.error("WBS não selecionado para uma das linhas.");
                    return;
                }
                row.find('input[type="number"]').each(function (index) {
                    const hours = $(this).val();
                    if (hours) {
                        const date = dates[index];
                        tableData.push({ FuncionarioId: funcionarioId, WBSId: wbs, HorasTrab: hours, DataRegistro: date });
                    }
                });
            });

            $.ajax({
                type: 'POST',
                url: '@Url.Action("SaveData", "Registroes")',
                data: JSON.stringify(tableData),
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    submittedDataArray.push(...tableData);
                    displaySubmittedData(submittedDataArray);
                },
                error: function (xhr, status, error) {
                    console.error('Erro ao enviar dados:', status, error);
                    console.error('Resposta do servidor:', xhr.responseText);
                }
            });
        }

        function displaySubmittedData(data) {
            const submittedDataBody = $('#submittedDataBody');
            submittedDataBody.empty();
            data.forEach(item => {
                const row = `<tr><td>${item.WBSId}</td><td>${item.DataRegistro}</td><td>${item.HorasTrab}</td></tr>`;
                submittedDataBody.append(row);
            });
        }

        function filterData() {
            const filterDate = $('#filterDate').val();
            const filterWBS = $('#filterWBS').val();
            const filterHours = $('#filterHours').val();

            const filteredData = submittedDataArray.filter(item => {
                return (!filterDate || item.DataRegistro === filterDate) &&
                    (!filterWBS || item.WBSId == filterWBS) &&
                    (!filterHours || item.HorasTrab == filterHours);
            });

            displaySubmittedData(filteredData);
        }

        function updateTotals(date) {
            let totalHours = 0;
            $(`input[data-date="${date}"]`).each(function () {
                totalHours += parseFloat($(this).val()) || 0;
            });

            $(`#total-${date}`).text(totalHours);

            if (totalHours > 12) {
                $(`input[data-date="${date}"]`).each(function () {
                    $(this).addClass('is-invalid');
                });
            } else {
                $(`input[data-date="${date}"]`).each(function () {
                    $(this).removeClass('is-invalid');
                });
            }
        }

        $(document).ready(function () {
            loadWBSOptions();
        });
    </script>
}
